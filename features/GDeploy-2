GDeploy Architecture for release 1.2


Summary:

In this architecture we are focusing on making gdeploy binary a tool
that can be used to parse a configuration and do a specific set of
actions in n number of host machines using ansible. These specific set
of actions can be either core gdeploy actions(Peer probe, volume
management, client management, etc.) or extra features like snapshot,
geo-replication etc. The extra features will be pluggable modules and
the code will stay in a directory features, making gdeploy core scripts
separate and independent of everything else. This will make the
developer's life much easier if she wishes to automate a new GlusterFS
feature using GDeploy.

Along with this GDeploy will be able to directly run custom scripts on n
number of host machine using ansible, if the custom script is provided
inside the extras directory. The arguments to be passed and such
behavioral features will be similar to that of the custom script. This
will add an extra level of abstraction to GDeploy, will keep additional
features separate allowing gdeploy binary to be not bulky and makes
GDeploy a bit more flexible if someone wishes to do something a bit more
fancy with GDeploy without toughing the core modules itself.

Changing to the above mentioned architecture will change the entire
directory structure of GDeploy and most of the code that is currently
working. In spite of this, the working of GDeploy will still remain the
same making the switch easier for the users who have used GDeploy from
it's previous releases.


Detailed directory structure for the new architecture:

gdeploy
    * gdeploy
    * README.md
    * setup.py
    * docs/
    * lib/
        - config_parse.py
        - helpers.py
        - yaml_writer.py
        - playbook_gen.py
        - add_feature.py
        - custom_action.py
    * core/
        - backend_setup.py
        - backend_reset.py
        - volume_management.py
        - client_management.py
        - peer_management.py
    * features/
        * snapshot/
            - snapshot-feature.in
            - snapshot.py
            - snapshot.yml
        * geo-replication/
            - georep-feature.in
            - georep.py
            - georep.yml
        * nfs-ganesha/
            - ganesha-feature.in
            - ganesha.py
            - ganesha.yml
        .
        .
        .
        .
        .
    * ansible_modules/
    * playbooks/
    * extras/
        * load.py
        * dummy.py
    * tests/


How features work in the new architecture:

    In the above mentioned architecture, if one wants to add a new
feature to GDeploy, she has to add two files to a directory inside the
features directory.

When GDeploy binary is run, passing in a configuration file, it will
first look for all the core sections like backend-setup, peer, volume,
clients, and backend-reset. After this, GDeploy will parse the rest of
the configuration file and reads in the provided section names. Then it
will look for directory with this section name inside the features
directory. So it is important for the developer to document the section
name(which is same as the directory name) properly so that the user
won't be confused.

Once the appropriate directory is found for the section, GDeploy goes
ahead with the validation of user provided data by looking into what's
given inside the <feature-name>-feature.in file. This file will contain
fields like this(Example for the purpose of demonstration):

Section: <feature name>

Options:

Name: Option1
Description: Example option
Required: True
format: .*option-.*

Name: Option2
Description: Example option 2
Required: False
Default: Bilbo

The user's configuration file will be parsed looking for each of the
mentioned options in the .in file, validating it based on the required
and format fields, setting default value, etc. At the end of this step,
Gdeploy will have a global python dictionary named section_dict which
will contain key value pairs corresponding to each of the option name
and it's value(s). If anymore feature specific changes are to be made in
this key value pair, that can be done using the python script specified
inside the directory. An example for such a change would be splitting up
of a particular value into n values, etc. Along with this, the developer
can ask gdeploy to write specific values to hostvars instead of
groupvars. API functions for this will be documented properly in GDeploy
man pages.

We expect developer to be acquainted with Ansible module creation and
development workflow as we want her to add a YAML file(ansible playbook)
in the same directory which is to be run making use of an Ansible
modules on the remote machines. While the first part just involved
parsing the configuration file, this involves the real operation to be
done on the remote machine. If the developer wishes to write her own
Ansible module, she has to add the code inside the ansible_modules
directory in the code base.

There will be tests written to check if the feature addition is proper
and obeys all the ansible requirements which can be run after doing a
feature addition.

Addition of the extras directory:

This is a very simple addition to GDeploy, with which one can run an
external python code using GDeploy library on remote machines without
worrying about writing ansible modules and playbooks.
